#!@WHICHPERL@
=head1 NAME

glam2scan_webservice - Run glam2scan in a restricted mode and create an index webpage.

=head1 SYNOPSIS

glam2scan_webservice [options] <glam2 alignment> <db sequences>

  Options:
    -alpha [DNA|PROTEIN]  alphabet
    -aligns <n>           number of alignments to report
    -up_seqs <file>       uploaded sequences
    -revcomp              examine both strands
    -help                 brief help message

=cut

use strict;
use warnings;

use Cwd qw(getcwd);
use Fcntl qw(SEEK_SET);
use File::Basename qw(fileparse);
use File::Spec::Functions qw(catfile tmpdir);
use File::Temp qw(tempfile);
use Getopt::Long;
use Pod::Usage;
use Time::HiRes qw(gettimeofday tv_interval);

use lib qw(@PERLLIBDIR@);

use ExecUtils qw(stringify_args invoke);
use MemeWebUtils qw(is_safe_name add_status_msg update_status loggable_date write_invocation_log);
use Globals;

# Globals
my $t0 = [&gettimeofday()];
# constants
my $tmpdir = '@TMP_DIR@';
# use the perl default if none is supplied or the replace fails
$tmpdir = &tmpdir() if ($tmpdir eq '' || $tmpdir =~ m/^\@TMP[_]DIR\@$/);
my $dbdir = '@MEMEDB@/fasta_databases';
my $workdir = getcwd;

# variables for the service invocation log
my $log_args = stringify_args(@ARGV);
my $log_date = loggable_date();
my $log_file = 'glam2scan-log';

# error files
my $messages = "messages.txt";

#status page
my $file_list;
my @arg_errors = ();
my $msg_list = [];
my $program = 'GLAM2SCAN';
my $page = 'index.html';
my $refresh = 10;

# required parameters
my $motifs;
my $db_seqs;
# option defaults
my $alpha = 'DNA';
my $aligns = undef;
my $up_seqs = undef;
my $revcomp = 0; #FALSE
my $help = 0; #FALSE
# derived defaults
my $sequences;

add_status_msg('Parsing arguments', $msg_list);

# redirect stderr so we can get the error message from GetOpts
my ($err_old, $err_tmp, $opts_ok, $opts_msg);
open($err_old, ">&STDERR") or die("Can't dup STDERR: $!");
$err_tmp = tempfile('GetOptions_XXXXXXXXXX', DIR => $tmpdir, UNLINK => 1); # make a temporary file
open(STDERR, '>&', $err_tmp) or die("Can't redirect STDERR: $!");
# parse options
$opts_ok = GetOptions(
  'alpha=s' => \$alpha,
  'aligns=i' => \$aligns,
  'up_seqs=s' => \$up_seqs,
  'revcomp' => \$revcomp,
  'help|?' => \$help
);
($motifs, $db_seqs) = @ARGV;
# display help
pod2usage(1) if $help;
# reset stderr and get the error message if any
open(STDERR, ">&", $err_old) or die("Can't reset STDERR: $!");
seek($err_tmp, 0, SEEK_SET);
while ($opts_msg = <$err_tmp>) {
  chomp($opts_msg);
  push(@arg_errors, $opts_msg);
}
close($err_tmp);

# remove any path from the files to ensure they are in this directory
$motifs = fileparse($motifs) if (defined($motifs));
$up_seqs = fileparse($up_seqs) if (defined($up_seqs));
$db_seqs = fileparse($db_seqs) if (defined($db_seqs));

# test the arguments
if ($alpha ne 'DNA' && $alpha ne 'PROTEIN') {
  push(@arg_errors, "Value \"$alpha\" invalid for option alpha (must be DNA or PROTEIN)");
}
if (defined($aligns)) {
  if ($aligns < 1 || $aligns > 200) {
    push(@arg_errors, "Value \"$aligns\" invalid for option aligns (must be between 1 and 200)");
  } 
}
if (defined($up_seqs)) {
  if (not is_safe_name($up_seqs)) {
    push(@arg_errors, "Value \"$up_seqs\" invalid for option up_seqs (does not fit allowed file name pattern)");
  } elsif (not -e $up_seqs) {
    push(@arg_errors, "Value \"$up_seqs\" invalid for option up_seqs (file does not exist)");
  } else {
    $sequences = $up_seqs;
  }
} elsif (defined($db_seqs)) {
  if (not is_safe_name($db_seqs)) {
    push(@arg_errors, "Database \"$db_seqs\" does not allowed file name pattern");
  } elsif (not -e catfile($dbdir, $db_seqs)) {
    push(@arg_errors, "Database \"$db_seqs\" does not exist in the database directory \"$dbdir\"");
  } else {
    $sequences = catfile('db', $db_seqs);
  }
} else {
  push(@arg_errors, "No Sequences provided");
}
unless (defined($motifs)) {
  push(@arg_errors, "No motifs provided");
} elsif (not is_safe_name($motifs)) {
  push(@arg_errors, "Motifs file \"$motifs\" does not fit allowed file name pattern.");
} elsif (not -e $motifs) {
  push(@arg_errors, "Motifs file \"$motifs\" does not exist");
}

$opts_ok = 0 if (scalar(@arg_errors) > 0);
foreach my $arg_error (@arg_errors) {
  print STDERR $arg_error, "\n";
  add_status_msg($arg_error, $msg_list);
}

# setup status page
$file_list = [
    {file => 'glam2scan.html', desc => 'GLAM2SCAN html output'},
    {file => 'glam2scan.txt', desc => 'GLAM2SCAN txt output'},
    {file => $motifs, desc => 'GLAM2 Input Alignment'}, 
    {file => $up_seqs, desc => 'Uploaded Sequence Database'}
];

if ($opts_ok) {
  add_status_msg('Arguments ok', $msg_list);
} else {
  add_status_msg("Error parsing arguments", $msg_list);
}

update_status($page, $program, ($opts_ok ? $refresh : 0), $file_list, 
    $msg_list, ($opts_ok ? "Starting" : "Error"));

# exit if there was an error reading the arguments
unless ($opts_ok) {
  write_invocation_log($log_file, $log_date, $log_args);
  pod2usage(2);
}

# Run GLAM2Scan
my @glam2scan_args = ('-o', 'glam2scan.txt');
push(@glam2scan_args, '-n', $aligns) if (defined($aligns));
push(@glam2scan_args, '-2') if ($revcomp);
push(@glam2scan_args, ($alpha eq 'DNA' ? 'n' : 'p'), $motifs, $sequences);
# create the symlink
symlink($dbdir, 'db') unless $up_seqs;
run_prog(
  PROG => 'glam2scan', 
  ARGS => \@glam2scan_args,
  BIN => '@BINDIR@', 
  ALL_FILE => $messages
);
# remove the simlink
unlink('db') unless $up_seqs;

run_prog(
  PROG => 'glam2scan2html', 
  ARGS => [],
  BIN => '@BINDIR@', 
  IN_FILE => 'glam2scan.txt',
  OUT_FILE => 'glam2scan.html',
  ERR_FILE => $messages
);

# Finish up
push(@{$file_list}, {file => $messages, desc => 'Warning Messages'});
update_status($page, $program, 0, $file_list, $msg_list, "Done");
write_invocation_log($log_file, $log_date, $log_args);
exit(0);

# Run the program and record if it succeeded to the status messages
sub run_prog {
  my (%options) = @_;

  my $prog = $options{PROG};
  my @args = @{$options{ARGS}};
  my ($timeout, $oot);

  add_status_msg('Starting '.$prog.'<br><code>' . stringify_args($prog, @args) . '</code>', $msg_list);

  update_status($page, $program, $refresh, $file_list, $msg_list, "Starting");

  my ($time, $status_code);
  # run the program
  $timeout = $Globals::MAXTIME - int(&tv_interval($t0, [&gettimeofday()]) + 0.5);
  $status_code = invoke(@_, TIME => \$time, TIMEOUT => $timeout, OOT => \$oot);
  my $status_msg;
  if ($oot) {
    $status_msg = "Ran out of time! Stopping " . $prog . ".";
  }
  if ($status_code != 0 || $oot) {
    if ($status_code == -1) {
      $status_msg = $prog . " failed to run";
    } elsif ($status_code & 127) {
      $status_msg = $prog . " process died with signal " . 
          ($status_code & 127) . ", " . 
          (($status_code & 128) ? 'with' : 'without') . " coredump";
    } else {
      $status_msg = $prog . " exited with error code " . ($status_code >> 8);
    }
    print STDERR $status_msg;
    push(@{$file_list}, {file => $messages, desc => 'Error Messages'});
  } else {
    $status_msg = $prog . ' ran successfully in ' . 
        (int($time * 100 + 0.5) / 100) . ' seconds';
  }
  add_status_msg($status_msg, $msg_list);

  update_status($page, $program, ($status_code ? 0 : $refresh), 
    $file_list, $msg_list, ($status_code ? "Error" : ""));

  if ($status_code || $oot) {
    write_invocation_log($log_file, $log_date, $log_args);
    exit(1);
  }
}

1;

