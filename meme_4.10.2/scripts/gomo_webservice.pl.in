#!@WHICHPERL@
=head1 NAME

gomo_webservice - Run gomo in a restricted mode and create an index webpage.

=head1 SYNOPSIS

gomo_webservice [options] <motif> <GO map> (<sequences> <background>)+

  Options:
    -shuffle_scores <times> shuffle scores
    -t <threshold>          q-value threshold
    -help                   brief help message

  Files present in the server gomo databases can be specified by appending 'db/'
  to the file name.

=cut

use strict;
use warnings;

use Cwd qw(getcwd);
use Fcntl qw(SEEK_SET);
use File::Basename qw(fileparse);
use File::Path qw(rmtree);
use File::Spec::Functions qw(catfile tmpdir);
use File::Temp qw(tempfile);
use Getopt::Long;
use Pod::Usage;
use Time::HiRes qw(gettimeofday tv_interval);

use lib qw(@PERLLIBDIR@);

use ExecUtils qw(stringify_args invoke);
use MemeWebUtils qw(is_safe_name add_status_msg update_status loggable_date write_invocation_log);
use Globals;

# Globals
my $t0 = [&gettimeofday()];
# constants
my $tmpdir = '@TMP_DIR@';
# use the perl default if none is supplied or the replace fails
$tmpdir = &tmpdir() if ($tmpdir eq '' || $tmpdir =~ m/^\@TMP[_]DIR\@$/);
my $dbdir = '@MEMEDB@/gomo_databases';
my $workdir = getcwd;

# variables for the service invocation log
my $log_args = stringify_args(@ARGV);
my $log_date = loggable_date();
my $log_file = 'gomo-log';

# error files
my $messages = "messages.txt";

#status page
my $file_list;
my @arg_errors = ();
my $msg_list = [];
my $program = 'GOMO';
my $page = 'index.html';
my $refresh = 10;

# required parameters
my $motifs;
my $gomap;
my @db_file_pairs;
# option defaults
my $t = undef;
my $shuffle_scores = undef;
my $help = 0; #FALSE
# derived defaults
my $godag = undef;

# make a symbolic link to the motif databases
symlink($dbdir, 'db');

# now parse the arguments
add_status_msg('Parsing arguments', $msg_list);

# redirect stderr so we can get the error message from GetOpts
my ($err_old, $err_tmp, $opts_ok, $opts_msg);
open($err_old, ">&STDERR") or die("Can't dup STDERR: $!");
$err_tmp = tempfile('GetOptions_XXXXXXXXXX', DIR => $tmpdir, UNLINK => 1); # make a temporary file
open(STDERR, '>&', $err_tmp) or die("Can't redirect STDERR: $!");
# parse options
$opts_ok = GetOptions(
  't=f' => \$t,
  'shuffle_scores=i' => \$shuffle_scores,
  'help|?' => \$help
);
($motifs, $gomap, @db_file_pairs) = @ARGV;
# display help
pod2usage(1) if $help;
# reset stderr and get the error message if any
open(STDERR, ">&", $err_old) or die("Can't reset STDERR: $!");
seek($err_tmp, 0, SEEK_SET);
while ($opts_msg = <$err_tmp>) {
  chomp($opts_msg);
  push(@arg_errors, $opts_msg);
}
close($err_tmp);

# check args
if (defined($t)) {
  if ($t <= 0 || $t > 0.5) {
    push(@arg_errors, "Value \"$t\" invalid for option t (must be between 0 and 0.5)");
  }
}
if (defined($shuffle_scores)) {
  if ($shuffle_scores < 0) {
    push(@arg_errors, "Value \"$shuffle_scores\" invalid for option shuffle_scores (must be positive)")
  }
}
# check motif file exists
unless (defined($motifs)) {
  push(@arg_errors, "No motifs provided");
} else {
  $motifs = fileparse($motifs);
  if (not is_safe_name($motifs)) {
    push(@arg_errors, "Motifs \"$motifs\" does not fit allowed file name pattern.");
  } elsif (not -e $motifs) {
    push(@arg_errors, "Motifs \"$motifs\" does not exist.");
  } 
}
# check GO map file exists
unless (defined($gomap)) {
  push(@arg_errors, "No GO mapping provided");
} else {
  my ($name, $path) = fileparse($gomap);
  if ($path eq 'db/') {
    $gomap = $path . $name;
  } else {
    $gomap = $name;
  }
  if (not is_safe_name($name)) {
    push(@arg_errors, "GO mapping \"". $gomap . "\" does not fit allowed file name pattern.");
  } elsif (not -e $gomap) {
    push(@arg_errors, "GO mapping \"". $gomap . "\" does not exist.");
  }
}
# check sequence and background pairs
unless (@db_file_pairs) {
  push(@arg_errors, "No sequence or background files provided");
} elsif (scalar(@db_file_pairs) % 2 != 0) {
  push(@arg_errors, "Odd number of files provided for the pairs of sequence and background files");
} else {
  for (my $i = 0; $i < scalar(@db_file_pairs); $i++) {
    my $type = ($i % 2 ? "Sequences file" : "Background file");
    my ($name, $path) = fileparse($db_file_pairs[$i]);
    if ($path eq 'db/') {
       $db_file_pairs[$i]= $path . $name;
    } else {
      $db_file_pairs[$i] = $name;
    }
    if (not is_safe_name($name)) {
      push(@arg_errors, "$type \"" . $db_file_pairs[$i] . "\" does not fit the allowed file name pattern.");
    } elsif (not -e $db_file_pairs[$i]) {
      push(@arg_errors, "$type \"". $db_file_pairs[$i] . "\" does not exist.");
    }
  }
}
$opts_ok = 0 if (scalar(@arg_errors) > 0);
foreach my $arg_error (@arg_errors) {
  print STDERR $arg_error, "\n";
  add_status_msg($arg_error, $msg_list);
}

# setup status page
$file_list = [
    {file => 'gomo.html', desc => 'GOMO html output'},
    {file => 'gomo.xml', desc => 'GOMO xml output'}, 
    {file => 'gomo.txt', desc => 'GOMO txt output'},
    {file => $motifs, desc => 'Input Motifs'}
];

add_status_msg(($opts_ok ? 'Arguments ok' : 'Error parsing arguments'), $msg_list);
update_status($page, $program, ($opts_ok ? $refresh : 0), $file_list, 
    $msg_list, ($opts_ok ? "Starting" : "Error"));

# exit if there was an error reading the arguments
unless ($opts_ok) {
  # exit if there was an error reading the arguments
  write_invocation_log($log_file, $log_date, $log_args);
  unlink('db') if (-e 'db');
  pod2usage(2);
}

# look for the GO dag
if (-e catfile('db', 'go.dag')) {
  $godag = catfile('db', 'go.dag');
}

# Run AMA
my @cismls = ();
for (my $i = 0; $i < scalar(@db_file_pairs); $i += 2) {
  my $seqs = $db_file_pairs[$i];
  my $bfile = $db_file_pairs[$i + 1];
  my $cisml = fileparse($seqs) . '.cisml';
  run_prog(
    PROG => 'ama', 
    ARGS => ['--pvalues', '--verbosity', 1, $motifs, $seqs, $bfile],
    BIN => '@BINDIR@', 
    OUT_FILE => $cisml,
    ERR_FILE => $messages
  );
  push(@cismls, $cisml);
}

# Run gomo on output of AMA
my @gomo_args = ('--nostatus', '--verbosity', 1, '--oc', '.', 
  '--motifs', $motifs);
push(@gomo_args, '--dag', $godag) if (defined($godag));
push(@gomo_args, '--t', $t) if (defined($t));
push(@gomo_args, '--shuffle_scores', $shuffle_scores) if (defined($shuffle_scores));
push(@gomo_args, $gomap, @cismls);
run_prog(
  PROG => 'gomo',
  ARGS => \@gomo_args,
  BIN => '@BINDIR@',
  ALL_FILE => $messages
);

# GZIP CISML files
add_status_msg('Running gzip on CISML files', $msg_list);
update_status($page, $program, $refresh, $file_list, $msg_list, "Working");
for (my $i = 0; $i < scalar(@cismls); $i++) {
  my $seqs = $db_file_pairs[$i * 2];
  if (-s $cismls[$i]) { #note: gzip removes the original file
    invoke(
      PROG => 'gzip',
      ARGS => [$cismls[$i]],
      ALL_FILE => $messages
    );
    push(@{$file_list}, {file => $cismls[$i] . '.gz', 
        desc => "AMA output for $seqs as XML (gzip compressed)"});
  }
}
# Finish up
unlink('db');
rmtree('logos');
push(@{$file_list}, {file => $messages, desc => 'Warning Messages'});
update_status($page, $program, 0, $file_list, $msg_list, "Done");
write_invocation_log($log_file, $log_date, $log_args);

exit(0);

# Run the program and record if it succeeded to the status messages
sub run_prog {
  my (%options) = @_;

  my $prog = $options{PROG};
  my @args = @{$options{ARGS}};
  my ($timeout, $oot);

  add_status_msg('Starting '.$prog.'<br><code>' . stringify_args($prog, @args) . '</code>', $msg_list);

  update_status($page, $program, $refresh, $file_list, $msg_list, "Working");

  my ($time, $status_code);
  # run the program
  $timeout = $Globals::MAXTIME - int(&tv_interval($t0, [&gettimeofday()]) + 0.5);
  $status_code = invoke(@_, TIME => \$time, TIMEOUT => $timeout, OOT => \$oot);
  my $status_msg;
  if ($oot) {
    $status_msg = "Ran out of time! Stopping ". $prog .".";
    add_status_msg($status_msg, $msg_list);
    print STDERR $status_msg;
  }
  if ($status_code != 0) {
    if ($status_code == -1) {
      $status_msg = $prog . " failed to run";
    } elsif ($status_code & 127) {
      $status_msg = $prog . " process died with signal " . 
          ($status_code & 127) . ", " . 
          (($status_code & 128) ? 'with' : 'without') . " coredump";
    } else {
      $status_msg = $prog . " exited with error code " . ($status_code >> 8);
    }
    print STDERR $status_msg;
    push(@{$file_list}, {file => $messages, desc => 'Error Messages'});
  } else {
    $status_msg = $prog . ' ran successfully in ' . 
        (int($time * 100 + 0.5) / 100) . ' seconds';
  }
  add_status_msg($status_msg, $msg_list);

  update_status($page, $program, ($status_code ? 0 : $refresh), $file_list, 
    $msg_list, ($status_code ? "Error" : "Working"));

  if ($status_code) {
    unlink('db');
    rmtree('logos') if (-e 'logos');
    write_invocation_log($log_file, $log_date, $log_args);
    exit(1);
  }
}
