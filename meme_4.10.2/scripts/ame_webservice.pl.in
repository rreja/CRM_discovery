#!@WHICHPERL@
=head1 NAME

ame_webservice - Run ame.

=head1 SYNOPSIS

ame_webservice [options] <sequences> <motifs>+

  Options: 
    -control <control sequences>  Use the specified control sequences.
    -method 
    -scoring
    -pvalue_threshold
    -pwm_threshold
    -pvalue_report_threshold
    -bgformat
    -bgfile
    -help                         Show this brief help message.

  Motif databases can be specified by prefixing the file name by "db/".

=cut

use strict;
use warnings;

use Fcntl qw(:DEFAULT SEEK_SET);
use File::Basename qw(fileparse);
use File::Spec::Functions qw(tmpdir);
use File::Temp qw(tempfile);
use Getopt::Long;
use Pod::Usage;

use lib qw(@PERLLIBDIR@);

use ExecUtils qw(stringify_args invoke);
use MemeWebUtils qw(is_safe_name add_status_msg update_status loggable_date write_invocation_log find_in_dir);
use Globals;

# constants
my $tmp_dir = '@TMP_DIR@';
# use the perl default if none is supplied or the replace fails
$tmp_dir = &tmpdir() if ($tmp_dir eq '' || $tmp_dir =~ m/^\@TMP[_]DIR\@$/);
my $dbdir = '@MEMEDB@/motif_databases';

# variables for the service invocation log
my $log_args = stringify_args(@ARGV);
my $log_date = loggable_date();
my $log_file = 'ame-log';

# error files
my $messages = "messages.txt";

#status page
my $file_list;
my @arg_errors = ();
my $msg_list = [];
my $program = 'AME';
my $page = 'index.html';
my $refresh = 60;


# Required parameters
my $sequences;
my @motif_patterns;

# Optional parameters
my $control = undef;
my $bgfile = undef;
my $method = "ranksum";
my $scoring = "avg";
my $pvalue_threshold = undef;
my $pwm_threshold = undef;
my $pvalue_report_threshold = undef;
my $bgformat = undef;
my $help = 0; # FALSE

# derivative parameters
my $shuffled_control = undef;

# make a symbolic link to the motif databases
symlink($dbdir, 'db');

add_status_msg('Parsing arguments', $msg_list);

# redirect stderr so we can get the error message from GetOpts
my ($err_old, $err_tmp, $opts_ok, $opts_msg);
open($err_old, ">&STDERR") or die("Can't dup STDERR: $!");
$err_tmp = tempfile('GetOptions_XXXXXXXXXX', DIR => $tmp_dir, UNLINK => 1); # make a temporary file
open(STDERR, '>&', $err_tmp) or die("Can't redirect STDERR: $!");
# parse options
$opts_ok = GetOptions(
  'control=s' => \$control,
  'method=s' => \$method,
  'scoring=s' => \$scoring,
  'pvalue-threshold=f' => \$pvalue_threshold,
  'pwm-threshold=f' => \$pwm_threshold,
  'pvalue-report-threshold=f' => \$pvalue_report_threshold,
  'bgformat=f' => \$bgformat,
  'bgfile=s' => \$bgfile,
  'help|?' => \$help
);
($sequences, @motif_patterns) = @ARGV;
# display help
pod2usage(1) if $help;
# reset stderr and get the error message if any
open(STDERR, ">&", $err_old) or die("Can't reset STDERR: $!");
seek($err_tmp, 0, SEEK_SET);
while ($opts_msg = <$err_tmp>) {
  chomp($opts_msg);
  push(@arg_errors, $opts_msg);
}
close($err_tmp);

unless ($method eq "ranksum" || $method eq "fisher") {
  push(@arg_errors, "Illegal value for parameter --method.");
}

unless ($scoring eq "avg" || $scoring eq "max" || $scoring eq "sum" || $scoring eq "totalhits") {
  push(@arg_errors, "Illegal value for parameter --scoring.");
}

if (defined$pvalue_threshold) {
  unless ($pvalue_threshold > 0 && $pvalue_threshold <= 1) {
    push(@arg_errors, "Illegal value for parameter --pvalue-threshold.");
  }
}

# pwm_threshold: no illegal values?

if (defined$pvalue_report_threshold) {
  unless ($pvalue_report_threshold > 0 && $pvalue_report_threshold <= 1) {
    push(@arg_errors, "Illegal value for parameter --pvalue-report-threshold.");
  }
}

# remove any path from the files to ensure they are in this directory
if (defined($control)) {
  $control = fileparse($control);
  if (not is_safe_name($control)) {
    push(@arg_errors, "Value \"$control\" invalid for option control (does not fit allowed file name pattern)");
  } elsif (not -e $control) {
    push(@arg_errors, "Value \"$control\" invalid for option control (file does not exist)");
  }
} elsif (defined($sequences)) {
  $shuffled_control = 'shuffled_' . $sequences;
}

if (defined($bgformat)) {
  if ($bgformat != 0 && $bgformat != 1 && $bgformat != 2) {
    push(@arg_errors, "Value \"$bgformat\" invalid for option bgformat");
  }
}

if (defined($bgfile)) {
  $bgfile = fileparse($bgfile);
  if (not is_safe_name($bgfile)) {
    push(@arg_errors, "Value \"$bgfile\" invalid for option bgfile (does not fit allowed file name pattern)");
  } elsif (not -e $bgfile) {
    push(@arg_errors, "Value \"$bgfile\" invalid for option bgfile (file does not exist)");
  }
}

unless (defined($sequences)) {
  push(@arg_errors, "No sequences provided.");
} else {
  $sequences = fileparse($sequences);
  if (not is_safe_name($sequences)) {
    push(@arg_errors, "Sequences \"$sequences\" does not fit allowed file name pattern.");
  } elsif (not -e $sequences) {
    push(@arg_errors, "Sequences \"$sequences\" does not exist.");
  } 
}

my $upmotif;
my @motifs = ();
unless (scalar(@motif_patterns)) {
  push(@arg_errors, "No motifs provided.");
} else {
  for (my $i = 0; $i < scalar(@motif_patterns); $i++) {
    if ($motif_patterns[$i] =~ m/^db\//) {
      my @dbmotifs = find_in_dir($dbdir, $motif_patterns[$i]);
      if (@dbmotifs) {
        push(@motifs, @dbmotifs);
      } else {
        push(@arg_errors, "Motif database \"" . $motif_patterns[$i] . "\" does not exist.");
      }
    } else {
      my ($name, $path) = fileparse($motif_patterns[$i]);
      if (not is_safe_name($name)) {
        push(@arg_errors, "Motifs \"". $name . "\" does not fit allowed file name pattern.");
      } elsif (not -e $name) {
        push(@arg_errors, "Motifs \"". $name . "\" does not exist.");
      } else {
        push(@motifs, $name);
      }
    }
  }
}

$opts_ok = 0 if (scalar(@arg_errors) > 0);
foreach my $arg_error (@arg_errors) {
  print STDERR $arg_error, "\n";
  add_status_msg($arg_error, $msg_list);
}

# setup error page
$file_list = [
    {file => 'ame.html', desc => 'AME HTML Output'},
    {file => 'ame.txt', desc => 'AME TXT Output'},
    {file => $sequences, desc => 'Uploaded Sequences'},
    {file => $control, desc => 'Uploaded Control Sequences'},
    {file => $shuffled_control, desc => 'Shuffled Sequences'},
    {file => $bgformat, desc => 'Background Model Format'},
    {file => $bgfile, desc => 'Uploaded Background Model'},
    {file => $upmotif, desc => 'Uploaded Motifs'},
];

if ($opts_ok) {
  add_status_msg('Arguments ok', $msg_list);
} else {
  # exit if there was an error reading the arguments
  add_status_msg("Error parsing arguments", $msg_list);
  update_status($page, $program, 0, $file_list, $msg_list, "Error");
  write_invocation_log($log_file, $log_date, $log_args);
  unlink('db') if (-e 'db');
  pod2usage(2);
}

my $prog;
my $status;
my @args = ();
my $bin_dir = '@BINDIR@';

# if a control is not supplied then shuffle the sequences to create a control
unless (defined($control)) {
  $control = $shuffled_control;
  $prog = 'fasta-dinucleotide-shuffle';
  @args = ('-f', $sequences, '-t', '-dinuc');
  run_prog(
    PROG => $prog,
    BIN => $bin_dir, 
    ARGS => \@args,
    OUT_FILE => $control,
    TMPDIR => $tmp_dir
  );
}

# run AME
$prog = 'ame';
@args = ('--verbose', 1, '--oc', '.', '--control', $control);
push(@args, '--bgformat', $bgformat) unless defined ($bgfile);
push(@args, '--bgformat', 2, '--bgfile', $bgfile) if defined($bgfile);
push(@args, '--scoring', $scoring, '--method', $method);
push(@args, '--pvalue-threshold', $pvalue_threshold) if defined $pvalue_threshold;
push(@args, '--pwm-threshold', $pwm_threshold) if defined $pwm_threshold;
push(@args, '--pvalue-report-threshold', $pvalue_report_threshold) if defined $pvalue_report_threshold;
push(@args, $sequences, @motifs);
run_prog(
  PROG => $prog,
  BIN => $bin_dir,
  ARGS => \@args,
  ALL_FILE => $messages,
  TMPDIR => $tmp_dir
);

# Finish up
write_invocation_log($log_file, $log_date, $log_args);

exit(0);

# Run the program and record if it succeeded to the status messages
sub run_prog {
  my (%options) = @_;

  my $prog = $options{PROG};
  my @args = @{$options{ARGS}};

  add_status_msg('Starting '.$prog.'<br><code>' . stringify_args($prog, @args) . '</code>', $msg_list);

  update_status($page, $program, $refresh, $file_list, $msg_list, "In Progress");

  my ($time, $status_code);
  # run the program
  $status_code = invoke(@_, TIME => \$time);
  my $status_msg;
  if ($status_code != 0) {
    if ($status_code == -1) {
      $status_msg = $prog . " failed to run";
    } elsif ($status_code & 127) {
      $status_msg = $prog . " process died with signal " . 
          ($status_code & 127) . ", " . 
          (($status_code & 128) ? 'with' : 'without') . " coredump";
    } else {
      $status_msg = $prog . " exited with error code " . ($status_code >> 8);
    }
    print STDERR "$status_msg\n";
    push(@{$file_list}, {file => $messages, desc => 'Error Messages'});
  } else {
    $status_msg = $prog . ' ran successfully in ' . 
        (int($time * 100 + 0.5) / 100) . ' seconds';
  }
  add_status_msg($status_msg, $msg_list);

  update_status($page, $program, 0, $file_list, $msg_list, 
      ($status_code ? "Error" : ""));

  if ($status_code) {
    write_invocation_log($log_file, $log_date, $log_args);
    unlink('db') if (-e 'db');
  }
}

1;
