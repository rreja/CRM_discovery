#!/opt/local/bin/perl -w 
# AUTHOR: Timothy L. Bailey
# CREATE DATE: 24 Nov 2006
#use strict;
use File::Basename;

$PGM = $0;			# name of program
$PGM =~ s#.*/##;                # remove part up to last slash
#@args = @ARGV;			# arguments to program
$| = 1;				# flush after all prints
$SIG{'INT'} = \&cleanup;	# interrupt handler
# Note: so that interrupts work, always use for system calls:
# 	if ($status = system("$command")) {&cleanup($status)}

# requires
push(@INC, split(":", $ENV{'PATH'}));	# look in entire path

# defaults
$get_all = 0;

my $usage = <<USAGE;		# usage message
  USAGE:
	$PGM [options]

	[-id <id>]+		id of motif to extract from MEME .txt file
	[-a]			match alternate id instead of id
	[-ia]			match either id or alternate id
	[-rc]			reverse-complement DNA motifs
	[-all]			get all motifs in the MEME .txt file

	Extract motif(s) from a MEME-formated motif database
	or from a MEME text output file (.txt format).

	Reads standard input.
	Writes standard output.

        Copyright
        (2006) The University of Queensland
        All Rights Reserved.
        Author: Timothy L. Bailey
USAGE

$nargs = 1;			# number of required args
if ($#ARGV+1 < $nargs) { &print_usage("$usage", 1); }

# get input arguments
$match_id = 1;
$match_alt = 0;
$match_ia = 0;
%id_list = ();
$n_needed = 0;
$rc = 0;
while ($#ARGV >= 0) {
  $_ = shift;
  if ($_ eq "-h") {				# help
    &print_usage("$usage", 0);
  } elsif ($_ eq "-rc") {
    $rc = 1;
  } elsif ($_ eq "-all") {
    $get_all = 1;
  } elsif ($_ eq "-id") {
    $_ = shift;
    $id_list{$_} = 1; 
    $n_needed++;
  } elsif ($_ eq "-a") {
    $match_alt = 1;
  } elsif ($_ eq "-ia") {
    $match_ia = 1;
  } else {
    &print_usage("$usage", 1);
  }
}

# set up what type of IDs to match
if ($match_alt) {
  $match_id = 0;	# match alternate ids only; don't match id
} elsif ($match_ia) {
  $match_alt = 1;	# match alternate ids and ids
}

# Read and save the header.
$header = "";
while (<STDIN>) {
  last if (/^MOTIF/);			# At start of first motif

  # save header lines
  $header .= "$_\n" if (/^MEME version/ || /^ALPHABET/ || /^strands/);
  if ($rc && /^ALPHABET/) {
    my @words = split;
    if ($words[1] ne "ACGT") {
      die("-rc may only be used with DNA motif files."); 
    }
  }
  if (/^Background/) {
    $header .= $_;
    # keep lines lines starting with a letter then digit
    while (<STDIN>) {
      if (/^\s*[a-zA-Z]\s*\d/) { $header .= $_; } else { last; }
    }
  }
}

# Read and output motifs
$n_left = $n_needed;					# number of ids not found yet
while (!eof(STDIN) && ($get_all || $n_left>0)) {			
  my @words = split;
  if (/^MOTIF/ 
    && ($get_all 
      || ($match_id && $id_list{$words[1]}) 
      || ($#words >= 2 && $match_alt && $id_list{$words[2]}) 
      ) 
    ) {	# found a target motif
    print "$header\n" if ($n_needed == $n_left--);	# print file header first time
    print;						# print motif header line
    while (<STDIN>) {					# find matrix representations
      last if (/^MOTIF/);				# reached next motif; go to outer loop
      print;						# print a line of the motif
      if (/^log-odds/ || /^letter-probability/) {	# motif matrix
        @words = split;
        my $w = $words[5];				# motif width
        if ($rc) {
          my (@a, @c, @g, @t);
	  for (my $i=0; $i<$w; $i++) {			# read in the motif matrix
	    $_ = <STDIN>;
            ($a[$i], $c[$i], $g[$i], $t[$i]) = split;
	  }
	  for (my $i=$w-1; $i>=0; $i--) {		# print the RC motif matrix
	    printf("%s\t%s\t%s\t%s\t\n", $t[$i], $g[$i], $c[$i], $a[$i]);
          }
        } else {
	  for (my $i=0; $i<$w; $i++) {			# print the motif matrix
	    $_ = <STDIN>;
	    print;
	  }
        }
      } # log-odds or letter-probability matrix
    } # motif body
  } else {
    $_ = <STDIN>;					# read next line
  }

} # Read and output motifs


# cleanup files
#&cleanup($status);
 
################################################################################
#                       Subroutines                                            #
################################################################################
 
################################################################################
#
#       print_usage
#
#	Print the usage message and exit.
#
################################################################################
sub print_usage {
  my($usage, $status) = @_;
 
  if (-c STDOUT) {			# standard output is a terminal
    open(C, "| more");
    print C $usage;
    close C;
  } else {				# standard output not a terminal
    print STDERR $usage;
  }

  exit $status;
}
 
################################################################################
#       cleanup
#
#       cleanup stuff
#
################################################################################
sub cleanup {
  my($status, $msg) = @_;
  if ($status && "$msg") {print STDERR "$msg: $status\n";}
  exit($status);
}
