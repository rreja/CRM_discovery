<!DOCTYPE html>
<html>
  <head>
    <meta charset="UTF-8" />
    <title>Sequence Databases - MEME Suite</title>
    <link rel="shortcut icon" type="image/x-icon" href="../doc/images/memesuite_icon.ico">
    <link rel="icon" type="image/png" href="../doc/images/memesuite_icon.png">
    <link href="../doc/css/style.css" rel="stylesheet" type="text/css" />
    <script src="../doc/js/menu-path.js"></script>
    <script src="../doc/js/menu.js"></script>
    <script src="../doc/js/utilities.js"></script>
    <script src="../js/site.js"></script>
    <style>
      div.btn h2, div.btn h3, div.btn h4 {
        display: inline;
        margin: 0;
      }
      div.btn {
        /* make it behave like a link */
        cursor: pointer;
        /* padding */
        margin: 0;
        padding: 2px;
      }
      div.btn:hover {
        color: #AA2244;
      }
      div.btn:active {
        color: #884466;
      }
      div.btn > span {
        /* heading font styling */
        font-size: 0.8em; 
        font-style: normal;
        font-family: Arial, serif;
        font-weight: bold;
      }
      div.btn > span.expanded {
        display: none;
      }
      div.btn > span.collapsed {
        display: inline-block;
        border-style: solid;
        border-width: 1px;
      }
      div.btn.expanded > span.expanded {
        display:inline-block;
      }
      div.btn.expanded > span.collapsed {
        display:none;
      }
      div.btn + div {
        display:none;
        margin-top: 0;
        margin-left: 5px;
        padding: 5px;
      }
      div.btn.expanded + div {
        display: block;
      }
      div.category + div.category {
        margin-top: 20px;
      }
      div.category > div.info {
        border: 1px solid black;
        padding: 5px;
        max-height: 600px;
        overflow-y: auto;
      }
      div.listing + div.listing {
        margin-top: 10px;
      }
      div.listing > div.info > p {
        margin-top: 0;
        margin-bottom: 2px;
      }
      div.listing > div.info > h5 {
        display: inline;
        margin-right: 5px;
      }
      div.listing > div.info > div.out {
        margin-top: 5px;
      }
      div.button {
        display: inline-block;
        font-variant: small-caps;
        font-weight: bold;
        padding: 2px;
        border: 1px solid green;
        color: green;
        vertical-align: middle;
        cursor: pointer;
        font-size: x-small;
      }
      div.button:hover {
        color: DarkGreen;
        border-color: DarkGreen;
      }
      div.button.active {
        color: white;
        background-color: DarkGreen;
        border-color: black;
      }
      div.button.deactivated {
        color: gray;
        border-color: gray;
      }
      div.button + div.button {
        margin-left: 5px;
      }
    </style>
    <script>

      function set_selected_info(container, db) {
        container.innerHTML = db.description;
      }

      function update_selected_db(container, button, data) {
        var i, version, alphabet, active;
        // make sure the button we clicked is the active one
        if (!/\bactive\b/.test(button.className)) {
          active = container.querySelector("div.button.active." + (/\bversion\b/.test(button.className) ? "version" : "alphabet"));
          if (active != null) toggle_class(active, "active", false);
          toggle_class(button, "active", true);
        }
        var version_buttons = container.querySelectorAll("div.button.version");
        var alphabet_buttons = container.querySelectorAll("div.button.alphabet");
        if (/\bversion\b/.test(button.className)) {
          version = parseInt(button.getAttribute("data-version"), 10);
          // see if we can use the currently selected alphabet
          var active = container.querySelector("div.button.alphabet.active");
          if (active != null) {
            alphabet = parseInt(active.getAttribute("data-alphabet"));
            if (data.versions[version].alphabets[alphabet] == null) {
              // can not use this alphabet, so deselect it
              toggle_class(active, "active", false);
              active = null;
            }
          }
          if (active == null) {
            // try the other buttons
            for (i = 0; i < alphabet_buttons.length; i++) {
              active = alphabet_buttons[i];
              alphabet = parseInt(active.getAttribute("data-alphabet"), 10);
              if (data.versions[version].alphabets[alphabet] != null) {
                toggle_class(active, "active", true);
                break;
              }
            }
          }
        } else {
          alphabet = parseInt(button.getAttribute("data-alphabet"), 10);
          // see if we can use the currently selected version
          var active = container.querySelector("div.button.version.active");
          if (active != null) {
            version = parseInt(active.getAttribute("data-version"), 10);
            if (data.versions[version].alphabets[alphabet] == null) {
              // can not use this alphabet, so deselect it
              toggle_class(active, "active", false);
              active = null;
            }
          }
          if (active == null) {
            // try the other buttons
            for (i = 0; i < version_buttons.length; i++) {
              active = version_buttons[i];
              version = parseInt(active.getAttribute("data-version"), 10);
              if (data.versions[version].alphabets[alphabet] != null) {
                toggle_class(active, "active", true);
                break;
              }
            }
          }
        }
        var btn, ver, alph;
        for (i = 0; i < version_buttons.length; i++) {
          btn = version_buttons[i];
          ver = parseInt(btn.getAttribute("data-version"), 10);
          toggle_class(btn, "deactivated", (data.versions[ver].alphabets[alphabet] == null));
        }
        for (i = 0; i < alphabet_buttons.length; i++) {
          btn = alphabet_buttons[i];
          alph = parseInt(btn.getAttribute("data-alphabet"), 10);
          toggle_class(btn, "deactivated", (data.versions[version].alphabets[alph] == null));
        }
        set_selected_info(container.querySelector("div.out"), data.versions[version].alphabets[alphabet]);
      }

      function make_db_handler(container, button, data) {
        return function (evt) {
          update_selected_db(container, button, data);
        };
      }

      function make_version_info(container, data) {
        var i, j, version, file, btn, out;
        // clear the container
        container.innerHTML = "";
        var overview = document.createElement("p");
        overview.innerHTML = data.description;
        container.appendChild(overview);
        var hdr = document.createElement("h5");
        hdr.appendChild(document.createTextNode("Versions: "));
        container.appendChild(hdr);
        for (i = 0; i < data.versions.length; i++) {
          version = data.versions[i];
          btn = document.createElement("div");
          btn.className = "button version";
          btn.setAttribute("data-version", i);
          btn.appendChild(document.createTextNode(version.name));
          btn.addEventListener("click", make_db_handler(container, btn, data), false);
          container.appendChild(btn);
        }
        hdr = document.createElement("h5");
        hdr.appendChild(document.createTextNode("\u00A0\u00A0Alphabets: "));
        container.appendChild(hdr);
        var has_active = false;
        for (i = 1; i <= data.alphabets; i *= 2) {
          if ((data.alphabets & i) == 0) continue;
          btn = document.createElement("div");
          btn.className = "button alphabet";
          btn.setAttribute("data-alphabet", i);
          btn.appendChild(document.createTextNode((i == 1 ? "RNA" : (i == 2 ? "DNA" : "Protein"))));
          btn.addEventListener("click", make_db_handler(container, btn, data), false);
          container.appendChild(btn);
        }
        out = document.createElement("div");
        out.className = "out";
        container.appendChild(out);
        update_selected_db(container, container.querySelector("div.button.version"), data);
      }

      function load_versions(container, listing_id) {
        "use strict";
        // now send the request
        var url = "sequences?listing=" + listing_id;
        var request = new XMLHttpRequest();
        request.addEventListener("load", function(evt) {
          var xml_doc = request.responseXML;
          var x_versions = xml_doc.firstChild;
          var data = {
            "id": x_versions.getAttribute("listing"),
            "name": x_versions.getAttribute("name"),
            "description": x_versions.getAttribute("description"),
            "alphabets": 0,
            "versions": []
          };
          var x_all_version = x_versions.getElementsByTagName("version");
          var i, j, x_version, version, x_all_file, x_file, alphabet, file;
          for (i = 0; i < x_all_version.length; i++) {
            x_version = x_all_version[i];
            version = {
              "id": x_version.getAttribute("id"),
              "name": x_version.getAttribute("name"),
              "alphabets": {}
            };
            x_all_file = x_version.getElementsByTagName("file");
            for (j = 0; j < x_all_file.length; j++) {
              x_file = x_all_file[j];
              alphabet = parseInt(x_file.getAttribute("alphabet"), 10);
              file = {
                "sequence_count": parseInt(x_file.getAttribute("count"), 10),
                "minimum_length": parseInt(x_file.getAttribute("min"), 10),
                "maximum_length": parseInt(x_file.getAttribute("max"), 10),
                "average_length": parseInt(x_file.getAttribute("avg"), 10),
                "total_length": parseInt(x_file.getAttribute("total"), 10),
                "description": x_file.getAttribute("description")
              };
              version.alphabets[alphabet] = file;
              data.alphabets |= alphabet;
            }
            data.versions.push(version);
          }
          make_version_info(container, data);
        }, false);
        request.open("GET", url, true);
        request.send();
      }

      function toggle_listing(listing, button) {
        toggle_class(button, 'expanded');
        if (!/\bloading\b/.test(listing.className)) {
          listing.className += " loading";
          var container = listing.querySelector(".info");
          var id = parseInt(listing.getAttribute("data-id"), 10);
          load_versions(container, id);
        }
      }

      function create_listing(id, name) {
        var listing = document.createElement("div");
        listing.className = "listing";
        listing.setAttribute("data-id", id);
        var button = document.createElement("div");
        button.className = "btn";
        var heading = document.createElement("h4");
        heading.appendChild(document.createTextNode(name));
        button.appendChild(heading);
        button.appendChild(document.createTextNode("\u2002"));
        var more = document.createElement("span");
        more.className = "collapsed";
        more.appendChild(document.createTextNode("..."));
        button.appendChild(more);
        var less = document.createElement("span");
        less.className = "expanded";
        less.appendChild(document.createTextNode("\u25BC"));
        button.appendChild(less);
        listing.appendChild(button);
        var info = document.createElement("div");
        info.className = "info subcontent";
        info.appendChild(document.createTextNode("loading..."));
        listing.appendChild(info);
        button.addEventListener("click", function (evt) {
          toggle_listing(listing, button);
        }, false);
        button.addEventListener("keypress", function(evt) {
          if (evt.which == 32 || evt.keyCode == 32) {
            toggle_listing(listing, button);
          }
        }, false);
        return listing;
      }
      
      function load_listings(container, category_id) {
        "use strict";
        // now send the request
        var url = "sequences?category=" + category_id;
        var request = new XMLHttpRequest();
        request.addEventListener("load", function(evt) {
          var xml_doc, listings, all_l, listing, i, id, name;
          xml_doc = request.responseXML;
          listings = xml_doc.firstChild;
          // clear the container
          container.innerHTML = "";
          // add the other options
          all_l = listings.getElementsByTagName("l");
          for (i = 0; i < all_l.length; i++) {
            listing = all_l[i];
            id = listing.getAttribute("i");
            name = listing.getAttribute("n");
            container.appendChild(create_listing(id, name));
          }
          // re-enable the list
        }, false);
        request.open("GET", url, true);
        request.send();

      }

      function toggle_category(category, button) {
        toggle_class(button, 'expanded');
        if (!/\bloading\b/.test(category.className)) {
          category.className += " loading";
          var container = category.querySelector(".info");
          var id = parseInt(category.getAttribute("data-id"), 10);
          load_listings(container, id);
        }
      }

    </script>
  </head>
  <body>
    <div class="content_box">
      <noscript>
        <div class="no_script">
          <div class="no_script_warning">
          <h1>Javascript is disabled! &#9785;</h1>
          <p>The MEME Suite web application requires the use of JavaScript but
          Javascript doesn't seem to be available on your browser.</p>
          <p>Please re-enable Javascript to use the MEME Suite.</p>
          </div>
        </div>
      </noscript>
      <div class="memesuitelogo">
        <h1>The MEME Suite</h1>
        <h2>Motif-based sequence analysis tools</h2>
      </div>
      <h1>Sequence Databases</h1>
      <div class="subcontent">
        <p>[Click a category to show its available databases. Within a category click a database to see details.]</p>
        <!--{category}-->
        <div class="category" data-id="XXXXidXXXX">
          <div class="btn" tabindex="0">
            <h3><!--{name}-->A Category<!--{/name}--> (<!--{cnt}-->Count of Databases<!--{/cnt}--> databases)</h3>
            &ensp;
            <span class="collapsed">...</span>
            <span class="expanded">&#x25BC;</span>
          </div>
          <div class="info">Loading...</div>
        </div>
        <!--{/category}-->
        <script>
          (function() {
            "use strict";
            function activate_button(category) {
              var button = category.querySelector(".btn");
              button.addEventListener("click", function (evt) {
                toggle_category(category, button);
              }, false);
              button.addEventListener("keypress", function(evt) {
                if (evt.which == 32 || evt.keyCode == 32) {
                  toggle_category(category, button);
                }
              }, false);
            }
            var i; var categories = document.querySelectorAll(".category");
            for (i = 0; i < categories.length; i++) activate_button(categories[i]);
          })();
        </script>
      </div>
    </div>
  </body>
</html>


